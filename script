#!/bin/bash

# color styling variables
blue=27
yellow=220
update_styling_variables() {
	export FOREGROUND=$yellow
	export BORDER_FOREGROUND=$blue
	export GUM_CHOOSE_HEADER_FOREGROUND=$yellow
	export GUM_CHOOSE_SELECTED_FOREGROUND=$blue
	export GUM_CHOOSE_CURSOR_FOREGROUND=$blue
	export GUM_CONFIRM_PROMPT_FOREGROUND=$yellow
	export GUM_CONFIRM_SELECTED_BACKGROUND=$blue
	export GUM_INPUT_PROMPT_FOREGROUND=$yellow
	export GUM_INPUT_CURSOR_FOREGROUND=$blue
	export GUM_PAGER_BORDER_FOREGROUND=$blue
	export GUM_PAGER_MATCH_FOREGROUND=$yellow
	export GUM_PAGER_MATCH_HIGH_BACKGROUND=$yellow
}
update_styling_variables
VSCODE_PATH=$HOME/Documents

# checking if the user is root and $HOME/.local/bin is in PATH
[ "$EUID" -eq 0 ] && (echo "Please do not run as root" ; exit 1)
[ -d "$HOME/.local/bin" ] || mkdir -p "$HOME/.local/bin"
[[ ":$PATH:" != *":$HOME/.local/bin:"* ]] && export PATH="$HOME/.local/bin:$PATH"

if [ "$DEBUG" ]; then
	TEMP_DIR=$(echo debugging) ; mkdir $TEMP_DIR
else
	TEMP_DIR=$(mktemp -d)
fi
if [ ! -d "$TEMP_DIR" ]; then
	echo "Failed to create temp directory, going home"
	cd $HOME
else
	cd $TEMP_DIR
fi

if ! command -v gum &> /dev/null; then
	repo=charmbracelet/gum
	echo "Checking for the latest version of $repo..."
	latest_release=$(curl -s https://api.github.com/repos/$repo/releases | sed -n 's/.*"tag_name": "\([^"]*\)".*/\1/p' | head -n 1)
	latest_release_name=gum_${latest_release#v}_Linux_x86_64
	echo "Downloading $repo..."
	wget -q --show-progress https://github.com/$repo/releases/download/$latest_release/$latest_release_name.tar.gz
	tar -xzf $latest_release_name.tar.gz
	mv $latest_release_name/gum $HOME/.local/bin
	rm -rf $latest_release_name.tar.gz $latest_release_name
fi

check_installed_programs() {
	cmds=("zsh" "git") # code
	for cmd in "${cmds[@]}"; do
		if command -v $cmd &> /dev/null; then
			echo -e "✅ $cmd is installed"
		else
			echo -e "❌ $cmd isn't installed"
		fi
	done
	if ([ "$root" = 'y' ] && command -v code &> /dev/null) ||
		([ "$root" = 'n' ] && [ -d $VSCODE_PATH/vscode ]); then
		echo -e "✅ code is installed"
	else
		echo -e "❌ code isn't installed"
	fi
}
install_command() {
	if [ -z "$1" ]; then
		CMD=$(gum input --placeholder "Enter the program to install:")
		[ -z "$CMD" ] && return
	else
		CMD=$1
	fi
	if ! command -v $CMD &> /dev/null; then
		if ! apt-cache policy $CMD | grep -q 'Installed: (none)'; then
			echo "The package $CMD doesn't exist"
			return
		fi
		[ -z "$list" ] && gum confirm "Do you have root privileges?" && root='y' || root='n'
		if [ "$root" = 'y' ]; then
			sudo apt-get install -y $CMD
		else
			[ -z "$list" ] && (gum confirm "Are you sure you want to install a program without root?" && true || return)
			apt-get download $CMD
			dpkg -x $CMD*.deb $TEMP_DIR/$CMD
			rm $CMD*.deb
			cp $TEMP_DIR/$CMD/usr/bin/* $HOME/.local/bin
			rm -rf $TEMP_DIR/$CMD
			# to remove all, get the cmds from 'ls $CMD/usr/bin/*' and cd $HOME/.local/bin ; rm $cmds
		fi
	elif [ -z "$list" ]; then
		echo "$CMD is already installed"
	fi
}
# Configurating extensions
install_gnome_extensions() {
	install_command chrome-gnome-shell
	if [ ! -f $HOME/snap/firefox/common/.mozilla/firefox/*.default/extensions/chrome-gnome-shell@gnome.org.xpi ]; then
		gum confirm "After clicking [Add]/[Allow], close firefox?" && true || return
		cd $HOME/Documents # firefox can't access directories outside of the snap sandbox
		wget -q https://addons.mozilla.org/firefox/downloads/file/4300298/gnome_shell_integration-12.xpi
		firefox gnome_shell_integration-12.xpi
		rm gnome_shell_integration-12.xpi
		cd - > /dev/null
	fi
	if ! gnome-extensions list --enabled | grep -q dash-to-panel; then
		gum confirm "After clicking [ON]/[Install], close firefox?" && true || return
		firefox https://extensions.gnome.org/extension/1160/dash-to-panel/
	fi
	if ! gnome-extensions list --enabled | grep -q clipboard-indicator; then
		gum confirm "After clicking [ON]/[Install], close firefox?" && true || return
		firefox https://extensions.gnome.org/extension/779/clipboard-indicator/
	fi
}
install_oh_my_zsh() {
	install_command "zsh"
	install_command "git"
	sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
}
install_vscode_root() {
	wget -q --show-progress -O vscode.deb "https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64"
	echo "code code/add-microsoft-repo boolean true" | sudo debconf-set-selections
	sudo dpkg -i vscode.deb
	sudo apt-get install -f -y
	rm vscode.deb
}
install_vscode_rootless() {
	wget -q --show-progress -O VSCode-linux-x64.tgz "https://code.visualstudio.com/sha/download?build=stable&os=linux-x64"
	tar -xzf VSCode-linux-x64.tgz
	rm VSCode-linux-x64.tgz
	mv VSCode-linux-x64 vscode
	mv vscode $VSCODE_PATH
	ln -s $VSCODE_PATH/vscode/bin/code $HOME/.local/bin/code
}
install_vscode_extensions() {
	code --install-extension ms-vscode.cpptools
	code --install-extension github.copilot
	code --install-extension ritwickdey.liveserver
}
export CODESETTINGSFILE=$HOME/.config/Code/User/settings.json
configure_vscode_settings() {
	if [ ! -f "$CODESETTINGSFILE" ]; then
		echo creating settings.json
		[ -d "$HOME/.config/Code/User" ] || mkdir -p "$HOME/.config/Code/User"
		cat << 'EOF' >> $CODESETTINGSFILE
{
	"github.copilot.editor.enableCodeActions": false,
	"extensions.ignoreRecommendations": true,
	"workbench.startupEditor": "none",
	"editor.detectIndentation": false,
	"editor.insertSpaces": false,
	"files.autoSave": "afterDelay"
}
EOF
	else
		echo settings.json already created
	fi
}
adding_alias() {
	gum confirm "Do you want to add aliases to .zshrc?" && true || return
	# verify is zsh is installed
	if grep -q "My custom aliases" $HOME/.zshrc; then
		echo aliases on .zshrc already added
		return
	fi
	echo adding aliases to .zshrc
	cat << 'EOF' >> $HOME/.zshrc
[[ ":$PATH:" != *":$HOME/.local/bin:"* ]] && export PATH="$HOME/.local/bin:$PATH"
#My custom aliases
alias fgit='find . -type d -name ".git"'
alias ccc='cc -Wall -Wextra -Werror *.c -lbsd -lreadline && ./a.out'
alias subm_to_main="git submodule foreach 'git checkout main -q 2>/dev/null || git checkout master -q 2>/dev/null'"
c() {
	if [ -z "$1" ]; then
		$VSCODE_PATH/vscode/bin/code .
	else
		$VSCODE_PATH/vscode/bin/code $1
	fi
}
gacp() {
	if [ -z "$1" ]; then
		git add . && git commit -m "Update" && git push
	else
		git add . && git commit -m "$1" && git push
	fi
}
export ZSH_COMPDUMP=$ZSH/cache/.zcompdump-$HOST
EOF
	sed -i 's/robbyrussell/simple/g' $HOME/.zshrc
}
install_docker() {
	curl -fsSL https://get.docker.com | sudo sh
	# setup docker without sudo
	sudo groupadd docker
	sudo usermod -aG docker $USER
	newgrp docker
	docker run hello-world
}
setting_default_shell() {
	gum confirm "Do you want to set zsh as default shell?" && true || return
	gum confirm "Do you have root privileges?" && root='y' || root='n'
	# verify is zsh is installed
	if [ "$SHELL" != '/usr/bin/zsh' ]; then
		if [ "$root" = 'y' ]; then
			chsh -s $(which zsh)
		else
			echo 'export SHELL=`which zsh`' >> $HOME/.bashrc
			echo '[ -z "$ZSH_VERSION" ] && exec "$SHELL" -l' >> $HOME/.bashrc
		fi
	else
		echo default shell is already $SHELL
	fi
}
install_edge() {
	# if no: microsoft-edge
	latest_version=$(curl -s https://packages.microsoft.com/repos/edge/pool/main/m/microsoft-edge-stable/ | sed -n '/<pre>/,/<\/pre>/p' | sed 's/<[^>]*>//g' | awk '{print $1}' | sort -V | tail -n 1)
	wget -q --show-progress -O edge.deb "https://packages.microsoft.com/repos/edge/pool/main/m/microsoft-edge-stable/$latest_version"
	sudo dpkg -i edge.deb
	sudo apt-get install -f
	rm edge.deb
}
system_update() {
	sudo apt-get update && sudo apt-get upgrade -y
}
install_extras() {
	# build-essential has: gcc, g++, make, etc... and ubuntu-extras has codecs
	sudo apt-get install -y gnome-tweaks build-essential ubuntu-restricted-extras
}
remove_poweroff_countdown() {
	gsettings set org.gnome.SessionManager logout-prompt false
}
setup_tlp() {
	sudo apt-get install -y tlp tlp-rdw
	sudo systemctl enable tlp
}
about() {
	open https://github.com/andrexandre/script > /dev/null
}
exit_script() {
	cd - > /dev/null
	rmdir $TEMP_DIR
	exit
}
update_gum() {
	repo=charmbracelet/gum
	echo "Checking for the latest version of $repo..."
	current_release=$(gum -v | cut -d ' ' -f 3)
	latest_release=$(curl -s https://api.github.com/repos/$repo/releases | grep -oP '"tag_name": "\K[^"]*' | head -n 1)
	if [ "$current_release" = "$latest_release" ]; then
		gum style --bold --foreground $blue --border-foreground $yellow --border double --padding "0 1" --align center "$repo is already on the latest version"
		return
	fi
	echo "Downloading $repo..."
	gum_latest_release=gum_${latest_release#v}_Linux_x86_64
	wget -q --show-progress https://github.com/$repo/releases/download/$latest_release/$gum_latest_release.tar.gz
	tar -xzf $gum_latest_release.tar.gz
	rm $HOME/.local/bin/gum
	mv $gum_latest_release/gum $HOME/.local/bin
	rm -rf $gum_latest_release.tar.gz $gum_latest_release
	echo "$repo successfully updated"
}
show_script() {
	curl -s https://raw.githubusercontent.com/andrexandre/script/refs/heads/main/script | gum pager
}
mode() {
	gum confirm "Do you have root privileges?" && root='y' || root='n'
	check_installed_programs
	echo mode root: $root
	gum confirm "Do you want to continue?" && true || return
	install_gnome_extensions
	install_oh_my_zsh
	[ "$root" = 'y' ] && install_vscode_root || install_vscode_rootless
	install_vscode_extensions
	configure_vscode_settings
	adding_alias
	setting_default_shell
	exit_script
}
view_code() {
	curl -sO https://raw.githubusercontent.com/andrexandre/script/refs/heads/main/script
	name="$1"
	awk "/^${name}\(\) {/,/}/" script | gum pager
	rm script
}
main() {
	gum style --bold --width 40 --border double --padding "1 2" --align center "Welcome to the Linux setup script! by andrexandre"
	while true; do
		REPLY=$(gum choose mode shell vscode install_command install_gnome_extensions install_docker others show_script $view_code_name exit_script)
		case $REPLY in
			vscode)
				REPLY=$(gum choose install_vscode_root install_vscode_rootless install_vscode_extensions configure_vscode_settings back)
				;;
			shell)
				REPLY=$(gum choose install_oh_my_zsh adding_alias setting_default_shell back)
				;;
			others)
				REPLY=$(gum choose install_edge system_update install_extras remove_poweroff_countdown setup_tlp update_gum about back)
				;;
			$view_code_name)
				[ "$view_code_name" = "enable_view_code" ] && blue=46 || blue=27
				[ "$view_code_name" = "enable_view_code" ] && view_code_name=disable_view_code || view_code_name=enable_view_code
				update_styling_variables
				continue
				;;
		esac
		[ "$REPLY" = "back" ] && continue
		[ "$REPLY" = "exit_script" ] && exit_script
		[ "$view_code_name" = "enable_view_code" ] && $REPLY || view_code "$REPLY"
	done
}
# toggle debug mode by doing: export DEBUG=y/unset DEBUG
if [ "$DEBUG" ]; then
	wget -q gist.github.com/andrexandre/d2b3bd31f14904c7ca7e4dc7fe617907/raw/test.sh
	bash test.sh
	rm test.sh
	exit_script
fi
[ -z "$root" ] && root=n
if [ -z "$list" ]; then
	view_code_name=enable_view_code
	main
else
	[ "$arg" ] && list=$(echo "$list" | tr ' ' '\n')
	echo "$list" | while read -r list_item; do
		$list_item
	done
	exit_script
fi
