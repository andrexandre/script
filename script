#!/bin/bash

# color styling variables
blue=220
yellow=27
export FOREGROUND=$blue
export BORDER_FOREGROUND=$yellow
export GUM_CONFIRM_PROMPT_FOREGROUND=$blue
export GUM_CONFIRM_SELECTED_BACKGROUND=$yellow
export GUM_INPUT_PROMPT_FOREGROUND=$blue
export GUM_INPUT_CURSOR_FOREGROUND=$yellow
export GUM_CHOOSE_HEADER_FOREGROUND=$blue
export GUM_CHOOSE_SELECTED_FOREGROUND=$yellow
export GUM_CHOOSE_CURSOR_FOREGROUND=$yellow
VSCODE_PATH=$HOME/Documents

# checking if the user is root and ~/.local/bin is in PATH
if [ "$EUID" -eq 0 ]; then
	echo "Please do not run as root"
	exit 1
fi
[ -d "$HOME/.local/bin" ] || mkdir -p "$HOME/.local/bin"
if [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
	export PATH="$HOME/.local/bin:$PATH"
fi
# if ! grep -q 'export PATH="$HOME/.local/bin:$PATH"' $HOME/.zshrc; then
# 	echo 'export PATH="$HOME/.local/bin:$PATH"' >> $HOME/.zshrc
# fi
if [ "$1" == "--debug" ]; then
	TEMP_DIR=$(echo debugging) ; mkdir $TEMP_DIR
fi
# Create a temporary directory and enter into it
TEMP_DIR=$(mktemp -d)
if [ ! -d "$TEMP_DIR" ]; then
	echo "Failed to create temp directory, going home"
	cd ~
else
	cd $TEMP_DIR
fi

if ! command -v gum &> /dev/null; then
	repo=charmbracelet/gum
	echo "Checking for the latest version of $repo..."
	latest_release=$(curl -s https://api.github.com/repos/$repo/releases | sed -n 's/.*"tag_name": "\([^"]*\)".*/\1/p' | head -n 1)
	latest_release_name=gum_${latest_release#v}_Linux_x86_64
	echo "Downloading $repo..."
	wget -q --show-progress https://github.com/$repo/releases/download/$latest_release/$latest_release_name.tar.gz
	tar -xzf $latest_release_name.tar.gz
	mv $latest_release_name/gum $HOME/.local/bin
	rm -rf $latest_release_name.tar.gz $latest_release_name
fi

gum style --bold --width 40 --border double --padding "1 2" --align center "Welcome to the Linux setup script! by andrexandre"
if [[ ! $SHELL = */zsh ]]; then
	gum style --bold --foreground 0 "This script may not work with bash as default shell"
fi

check_installed_programs() {
	gum confirm "Do you have root privileges?" && ROOT='y' || ROOT='n'
	cmds=("zsh" "git")
	for cmd in "${cmds[@]}"; do
		if command -v $cmd &> /dev/null; then
			echo -e "✅ $cmd is installed"
		else
			echo -e "❌ $cmd isn't installed"
		fi
	done
	if ([ "$ROOT" = 'y' ] && command -v code &> /dev/null) ||
		([ "$ROOT" = 'n' ] && [ -d $VSCODE_PATH/vscode ]); then
		echo -e "✅ code is installed"
	else
		echo -e "❌ code isn't installed"
	fi
	if [ -f $HOME/.zshrc ]; then
		if grep -q "My custom aliases" $HOME/.zshrc; then
			echo -e "✅ aliases are added"
		else
			echo -e "❌ aliases aren't added"
		fi
	else
		echo -e "❌ there's no .zshrc file"
	fi
}
install_command() {
	if [ -z "$1" ]; then
		CMD=$(gum input --placeholder "Enter the program to install:")
		if [ -z "$CMD" ]; then
			return
		fi
	else
		CMD=$1
	fi
	if ! command -v $CMD &> /dev/null; then
		if ! apt-cache policy $CMD | grep -q 'Installed: (none)'; then
			echo "The package $CMD doesn't exist"
			return 1
		fi
		gum confirm "Do you have root privileges?" && ROOT='y' || ROOT='n'
		if [ "$ROOT" = 'y' ]; then
			sudo apt-get install -y $CMD
		else
			gum confirm "Are you sure you want to install a program without root?" && true || return
			apt-get download $CMD
			dpkg -x $CMD*.deb /tmp/command
			rm $CMD*.deb
			cp /tmp/command/usr/bin/$CMD $HOME/.local/bin
			rm -rf /tmp/command
		fi
	else
		echo "$CMD is already installed"
	fi
}
# Configurating extensions
install_gnome_extensions() {
	# sudo apt-get install -y chrome-gnome-shell # needed to install extensions
	# sudo apt-get install -y gnome-shell-extensions # maybe it is the extensions manager gui, idk
	# sudo apt-get install -y gnome-shell-extension-manager # for sure it is the extensions manager
	if [ ! -f $HOME/snap/firefox/common/.mozilla/firefox/*.default/extensions/chrome-gnome-shell@gnome.org.xpi ]; then
		wget -q https://addons.mozilla.org/firefox/downloads/file/4300298/gnome_shell_integration-12.xpi
		firefox gnome_shell_integration-12.xpi
		gum confirm "Have you clicked [Add] on firefox?" && true || return
		rm gnome_shell_integration-12.xpi
	fi
	if ! gnome-extensions list --enabled | grep -q dash-to-panel; then
		firefox https://extensions.gnome.org/extension/1160/dash-to-panel/
		gum confirm "Have you turned [ON] and clicked [Install]?" && true || return
	fi
	if ! gnome-extensions list --enabled | grep -q clipboard-indicator; then
		firefox https://extensions.gnome.org/extension/779/clipboard-indicator/
		gum confirm "Have you turned [ON] and clicked [Install]?" && true || return
	fi
}
install_oh_my_zsh() {
	install_command "zsh"
	install_command "git"
	sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
}
install_vscode_root() {
	wget -q --show-progress -O vscode.deb "https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64"
	sudo dpkg -i vscode.deb
	sudo apt-get install -f
	rm vscode.deb
}
install_vscode_rootless() {
	wget -q --show-progress -O VSCode-linux-x64.tgz "https://code.visualstudio.com/sha/download?build=stable&os=linux-x64"
	tar -xzf VSCode-linux-x64.tgz
	rm VSCode-linux-x64.tgz
	mv VSCode-linux-x64 vscode
	mv vscode $VSCODE_PATH
	ln -s $VSCODE_PATH/vscode/bin/code $HOME/.local/bin/code
}
install_vscode_extensions() {
	code --install-extension mhutchie.git-graph
	code --install-extension ms-vscode.cpptools
	code --install-extension github.copilot
}
export CODESETTINGSFILE=$HOME/.config/Code/User/settings.json
configure_vscode_settings() {
	if [ ! -f $CODESETTINGSFILE ]; then
		echo creating settings.json
		[ -d "$HOME/.config/Code/User" ] || mkdir -p "$HOME/.config/Code/User"
		cat << 'EOF' >> $CODESETTINGSFILE
{
	"github.copilot.editor.enableCodeActions": false,
	"extensions.ignoreRecommendations": true,
	"workbench.startupEditor": "none",
	"editor.detectIndentation": false,
	"editor.insertSpaces": false,
	"files.autoSave": "afterDelay"
}
EOF
	else
		echo settings.json already created
	fi
}
adding_alias() {
	if grep -q "My custom aliases" $HOME/.zshrc; then
		echo aliases already added
		return
	fi
	echo adding aliases to .zshrc
	cat << 'EOF' >> $HOME/.zshrc
#My custom aliases
alias fgit='find . -type d -name ".git"'
alias ccc='cc -Wall -Wextra -Werror *.c -lbsd -lreadline && ./a.out'
c() {
	if [ -z "$1" ]; then
		$VSCODE_PATH/vscode/bin/code .
	else
		$VSCODE_PATH/vscode/bin/code $1
	fi
}
gacp() {
	if [ -z "$1" ]; then
		git add . && git commit -m "Update" && git push
	else
		git add . && git commit -m "$1" && git push
	fi
}
export ZSH_COMPDUMP=$ZSH/cache/.zcompdump-$HOST
EOF
	sed -i 's/robbyrussell/simple/g' $HOME/.zshrc
}
install_docker() {
	curl -fsSL https://get.docker.com | sudo sh
	# setup docker execution without sudo
	sudo groupadd docker
	sudo usermod -aG docker $USER
	newgrp docker
	docker run hello-world
}
setting_default_shell() {
	gum confirm "Do you have root privileges?" && ROOT='y' || ROOT='n'
	if [ "$SHELL" != '/usr/bin/zsh' ]; then
		if [ "$ROOT" = 'y' ]; then
			chsh -s $(which zsh)
		else
			echo exec /bin/zsh > $HOME/.bashrc
		fi
	else
		echo default shell is already $SHELL
	fi
}
install_edge() {
	latest_version=$(curl -s https://packages.microsoft.com/repos/edge/pool/main/m/microsoft-edge-stable/ | sed -n '/<pre>/,/<\/pre>/p' | sed 's/<[^>]*>//g' | awk '{print $1}' | sort -V | tail -n 1)
	wget -q --show-progress -O edge.deb "https://packages.microsoft.com/repos/edge/pool/main/m/microsoft-edge-stable/$latest_version"
	sudo dpkg -i edge.deb
	sudo apt-get install -f
	rm edge.deb
}
system_update() {
	sudo apt-get update && sudo apt-get upgrade -y
}
install_extras() {
	sudo apt-get install -y dconf gnome-tweaks build-essential ubuntu-restricted-extras
}
remove_poweroff_countdown() {
	gsettings set org.gnome.SessionManager logout-prompt false
}
setup_tlp() {
	sudo apt-get install -y tlp tlp-rdw
	sudo systemctl enable tlp
}
exit_script() {
	cd - > /dev/null
	rmdir $TEMP_DIR
	exit
}
update_gum() {
	repo=charmbracelet/gum
	echo "Checking for the latest version of $repo..."
	current_release=$(gum -v | cut -d ' ' -f 3)
	latest_release=$(curl -s https://api.github.com/repos/$repo/releases | grep -oP '"tag_name": "\K[^"]*' | head -n 1)
	if [ "$current_release" = "$latest_release" ]; then
		gum style --bold --foreground $yellow --border-foreground $blue --border double --padding "0 1" --align center "$repo is already on the latest version"
		return
	fi
	echo "Downloading $repo..."
	gum_latest_release=gum_${latest_release#v}_Linux_x86_64
	wget -q --show-progress https://github.com/$repo/releases/download/$latest_release/$gum_latest_release.tar.gz
	tar -xzf $gum_latest_release.tar.gz
	rm $HOME/.local/bin/gum
	mv $gum_latest_release/gum $HOME/.local/bin
	rm -rf $gum_latest_release.tar.gz $gum_latest_release
	echo "$repo successfully updated"
}
mode() {
	gum confirm "Do you have root privileges?" && ROOT='y' || ROOT='n'
	check_installed_programs
	echo mode root: $ROOT
	gum confirm "Do you want to continue?" && true || exit_script
	install_gnome_extensions
	install_oh_my_zsh
	if [ "$ROOT" = 'y' ]; then
		install_vscode_root
	else
		install_vscode_rootless
	fi
	install_vscode_extensions
	configure_vscode_settings
	adding_alias
	setting_default_shell
	exit_script
}
back() { true; }
main() {
	while true; do
		REPLY=$(gum choose mode shell vscode install_command install_gnome_extensions install_docker system about exit_script)
		case $REPLY in
			vscode)
				REPLY=$(gum choose install_vscode_root install_vscode_rootless install_vscode_extensions configure_vscode_settings back)
				;;
			shell)
				REPLY=$(gum choose install_oh_my_zsh adding_alias setting_default_shell back)
				;;
			system)
				REPLY=$(gum choose install_edge system_update install_extras remove_poweroff_countdown setup_tlp update_gum back)
				;;
			about)
				open https://github.com/andrexandre/script > /dev/null
				continue
				;;
		esac
		$REPLY
	done
}

main
