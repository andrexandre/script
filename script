#!/bin/bash

# color styling variables
blue=27
yellow=220
green=46
primary=$yellow
secondary=$blue
update_styling_variables() {
	export FOREGROUND=$primary
	export BORDER_FOREGROUND=$secondary
	export GUM_CHOOSE_HEADER_FOREGROUND=$primary
	export GUM_CHOOSE_SELECTED_FOREGROUND=$secondary
	export GUM_CHOOSE_CURSOR_FOREGROUND=$secondary
	export GUM_CONFIRM_PROMPT_FOREGROUND=$primary
	export GUM_CONFIRM_SELECTED_BACKGROUND=$secondary
	export GUM_INPUT_PROMPT_FOREGROUND=$primary
	export GUM_INPUT_CURSOR_FOREGROUND=$secondary
	export GUM_PAGER_BORDER_FOREGROUND=$secondary
	export GUM_PAGER_MATCH_FOREGROUND=$primary
	export GUM_PAGER_MATCH_HIGH_BACKGROUND=$primary
}
update_styling_variables
VSCODE_PATH=$HOME/Documents

[ "$EUID" -eq 0 ] && (echo "Please do not run as root" ; exit 1)
if [ "$DEBUG" ]; then
	TEMP_DIR=$(echo debugging) ; mkdir $TEMP_DIR
else
	TEMP_DIR=$(mktemp -d)
fi
if [ ! -d "$TEMP_DIR" ]; then
	echo "Failed to create temp directory, going home"
	cd $HOME
else
	cd $TEMP_DIR
fi

[ -d "$HOME/.local/bin" ] || mkdir -p "$HOME/.local/bin"
shellrc=$HOME/."$(basename "$SHELL")"rc
if ! echo "$PATH" | grep -q "$HOME/.local/bin" && \
	! grep -qF '[[ ":$PATH:" != *":$HOME/.local/bin:"* ]] && export PATH="$HOME/.local/bin:$PATH"' $shellrc; then
	echo '# include ~/.local/bin in PATH' >> $shellrc
	echo '[[ ":$PATH:" != *":$HOME/.local/bin:"* ]] && export PATH="$HOME/.local/bin:$PATH"' >> $shellrc
fi
[[ ":$PATH:" != *":$HOME/.local/bin:"* ]] && export PATH="$HOME/.local/bin:$PATH"
parse_install_cmd() {
	if [ -z "$1" ]; then
		CMD=$(gum input --placeholder "Program to install")
		[ -z "$CMD" ] && return 1
	else
		CMD=$1
	fi
	if ! apt-cache policy $CMD | grep -q "Candidate:"; then
		echo "The package $CMD doesn't exist" ; return 1
	fi
}
install_cmd_root() {
	if parse_install_cmd "$@"; then
		if ! apt-cache policy $CMD | grep -q 'Installed: (none)'; then
			echo "$CMD is already installed" ; return
		else
			sudo apt-get install -y $CMD > /dev/null &&
			[ -z "$list" ] && echo "$CMD installed successfully"
		fi
	fi
}
install_cmd_rootless() {
	if parse_install_cmd "$@"; then
		apt-get download $CMD > /dev/null
		dpkg -x $CMD*.deb $TEMP_DIR/$CMD
		rm $CMD*.deb
		# check if files in .local/bin correspond to the binaries to be installed
		if ls "$TEMP_DIR/$CMD/usr/bin" | grep -Fxf <(ls "$HOME/.local/bin"); then
			echo "$CMD is already installed"
		else
			cp $TEMP_DIR/$CMD/usr/bin/* $HOME/.local/bin
			[ -z "$list" ] && echo "$CMD installed successfully"
		fi
		rm -rf $TEMP_DIR/$CMD
		[ -z "$list" ] && echo Testing the need of libraries...
		timeout -s KILL 2s $CMD > /dev/null 2>&1
		if [ "$?" = "127" ]; then
			echo "The '$CMD' command needs libraries"
			echo "Installing with sudo..."
			if sudo apt-get install -y $CMD > /dev/null; then
				[ -z "$list" ] && echo "$CMD installed successfully"
			else
				rm $HOME/.local/bin/$CMD
			fi
		fi
	fi
}
# Configurating extensions
install_gnome_extensions() {
	command -v chrome-gnome-shell &> /dev/null || install_cmd_root chrome-gnome-shell
	if [ ! -f $HOME/snap/firefox/common/.mozilla/firefox/*.default/extensions/chrome-gnome-shell@gnome.org.xpi ]; then
		gum confirm "After clicking [Add]/[Allow], close firefox?" || return
		(
			cd $HOME/Documents # firefox can't access directories outside of the snap sandbox
			wget -q https://addons.mozilla.org/firefox/downloads/file/4300298/gnome_shell_integration-12.xpi
			firefox gnome_shell_integration-12.xpi
			rm gnome_shell_integration-12.xpi
		)
	fi
	if ! gnome-extensions list --enabled | grep -q dash-to-panel; then
		echo "After clicking [ON]/[Install], click the button: settings -> about -> import from file and select the dash-to-panel.bak"
		wget -qO $HOME/Desktop/dash-to-panel.bak gist.github.com/andrexandre/08622ff1367bf6af7b6ea084fea779be/raw/dash-to-panel.bak
		gum confirm "To continue, close firefox?" || return
		firefox https://extensions.gnome.org/extension/1160/dash-to-panel/
		rm $HOME/Desktop/dash-to-panel.bak
	fi
	if ! gnome-extensions list --enabled | grep -q clipboard-indicator; then
		gum confirm "After clicking [ON]/[Install], close firefox?" || return
		firefox https://extensions.gnome.org/extension/779/clipboard-indicator/
	fi
}
install_oh_my_zsh() {
	command -v zsh &> /dev/null || install_cmd_root -q zsh
	command -v git &> /dev/null || install_cmd_root -q git
	sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
}
install_vscode_root() {
	command -v code && echo remove previous code command to install vscode && return
	wget -q --show-progress -O vscode.deb "https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64"
	echo "code code/add-microsoft-repo boolean true" | sudo debconf-set-selections
	sudo dpkg -i vscode.deb
	sudo apt-get install -f -y
	rm vscode.deb
}
install_vscode_rootless() {
	[ -d "$VSCODE_PATH/vscode" ] && echo "rm -rf $VSCODE_PATH/vscode to install vscode" && return
	wget -q --show-progress -O VSCode-linux-x64.tgz "https://code.visualstudio.com/sha/download?build=stable&os=linux-x64"
	tar -xzf VSCode-linux-x64.tgz
	rm VSCode-linux-x64.tgz
	mv VSCode-linux-x64 $VSCODE_PATH/vscode
	[ -L "$HOME/.local/bin/code" ] && return
	if command -v code; then
		ln -s $VSCODE_PATH/vscode/bin/code $HOME/.local/bin/vscode
		echo \'code\' command exists, created symlink named vscode
		echo to change the name of the symlink, run the following command:
		echo "mv $HOME/.local/bin/vscode $HOME/.local/bin/<link_name>"
	else
		ln -s $VSCODE_PATH/vscode/bin/code $HOME/.local/bin/code
	fi
}
configure_vscode_extensions() {
	! which code &> /dev/null && echo no code command found && return
	code --install-extension ms-vscode.cpptools
	code --install-extension github.copilot
	code --install-extension ritwickdey.liveserver
}
export CODESETTINGSFILE=$HOME/.config/Code/User/settings.json
configure_vscode_settings() {
	if [ ! -f "$CODESETTINGSFILE" ]; then
		echo creating settings.json
		[ -d "$HOME/.config/Code/User" ] || mkdir -p "$HOME/.config/Code/User"
		cat << 'EOF' >> $CODESETTINGSFILE
{
	"github.copilot.editor.enableCodeActions": false,
	"extensions.ignoreRecommendations": true,
	"workbench.startupEditor": "none",
	"editor.detectIndentation": false,
	"editor.insertSpaces": false,
	"files.autoSave": "afterDelay"
}
EOF
	else
		echo settings.json already created
	fi
}
configure_zsh_and_alias() {
	if ! command -v zsh &> /dev/null || [ ! -f "$HOME/.zshrc" ]; then
		echo no zsh or .zshrc file ; return
	fi
	(
		cd $HOME/.oh-my-zsh/custom/plugins
		git clone https://github.com/zsh-users/zsh-autosuggestions.git zsh-autosuggestions
		git clone https://github.com/zsh-users/zsh-syntax-highlighting.git zsh-syntax-highlighting
	)
	sed -i 's/plugins=(git)/plugins=(git zsh-autosuggestions zsh-syntax-highlighting)/g' $HOME/.zshrc
	sed -i 's/robbyrussell/simple/g' $HOME/.zshrc
	sed -i "/^# zstyle ':omz:update' mode auto/s/^..//" $HOME/.zshrc
	if grep -q "My custom aliases" $HOME/.zshrc; then
		echo aliases on .zshrc already added ; return
	fi
	curl -fsSL gist.github.com/andrexandre/eee55b8b0c321c23ea62fec037ca430b/raw/.zshrc >> $HOME/.zshrc
}
install_docker() {
	curl -fsSL https://get.docker.com | sudo sh
	# setup docker without sudo
	sudo groupadd docker
	sudo usermod -aG docker $USER
	newgrp docker
	docker run hello-world
}
set_zsh_as_default_shell() {
	! command -v zsh &> /dev/null && echo zsh not installed && return
	if [ "$SHELL" != "$(which zsh)" ]; then
		chsh -s "$(which zsh)"
	elif [ -z "$list" ]; then
		echo default shell is already $SHELL
	fi
}
install_edge() {
	command -v microsoft-edge-stable &> /dev/null && echo edge is already installed && return
	latest_version=$(curl -fsSL https://packages.microsoft.com/repos/edge/pool/main/m/microsoft-edge-stable/ | sed -n '/<pre>/,/<\/pre>/p' | sed 's/<[^>]*>//g' | awk '{print $1}' | sort -V | tail -n 1)
	wget -q --show-progress -O edge.deb "https://packages.microsoft.com/repos/edge/pool/main/m/microsoft-edge-stable/$latest_version"
	sudo dpkg -i edge.deb
	sudo apt-get install -f
	rm edge.deb
}
system_update() {
	sudo apt-get update && sudo apt-get upgrade -y
}
install_extras() {
	# build-essential has: gcc, g++, make, etc... and ubuntu-extras has codecs
	sudo apt-get install -y gnome-tweaks build-essential ubuntu-restricted-extras
}
define_settings() {
	gsettings set org.gnome.desktop.interface color-scheme 'prefer-dark'
	gsettings set org.gnome.SessionManager logout-prompt false
	gsettings set org.gnome.desktop.privacy old-files-age 30
	gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-left "['<Super>Page_Up', '<Super><Alt>Left']"
	gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-right "['<Super>Page_Down', '<Super><Alt>Right']"
}
setup_tlp() {
	sudo apt-get install -y tlp tlp-rdw
	if ! systemctl is-enabled tlp &> /dev/null; then
		sudo systemctl enable tlp
	fi
}
quit() {
	cd - > /dev/null
	rmdir $TEMP_DIR
	exit $1
}
show_script_code() {
	curl -fsSL https://raw.githubusercontent.com/andrexandre/script/refs/heads/main/script | gum pager
}
uninstall_cmd_rootless() {
	if [ -z "$1" ]; then
		CMD=$(gum input --placeholder "Program to uninstall")
		[ -z "$CMD" ] && return
	else
		CMD=$1
	fi
	if ! apt-cache policy $CMD | grep -q "Candidate:"; then
		echo "The package $CMD doesn't exist"
		return
	fi
	apt-get download $CMD > /dev/null
	dpkg -x $CMD*.deb $TEMP_DIR/$CMD
	rm $CMD*.deb
	cmds=$(ls $TEMP_DIR/$CMD/usr/bin)
	rm -rf $TEMP_DIR/$CMD
	(cd $HOME/.local/bin ; rm -f $cmds)
	[ -z "$list" ] && echo "$CMD removed successfully"
}
rootless_mode() {
	gum confirm "Do you want to run rootless mode?" || return
	define_settings
	install_gnome_extensions
	install_oh_my_zsh
	install_vscode_rootless
	install_vscode_extensions
	configure_vscode_settings
	configure_zsh_and_alias
	echo 'export ZSH_COMPDUMP=$ZSH/cache/.zcompdump-$HOST' >> $HOME/.zshrc
	quit
}
root_mode() {
	gum confirm "Do you want to run root mode?" || return
	define_settings
	system_update
	install_gnome_extensions
	install_oh_my_zsh
	configure_zsh_and_alias
	set_zsh_as_default_shell
	install_vscode_root
	install_vscode_extensions
	configure_vscode_settings
	gsettings set org.gnome.shell favorite-apps "['org.gnome.Nautilus.desktop', 'org.gnome.Terminal.desktop', 'code.desktop']"
	quit
}
full_mode() {
	gum confirm "Do you want to run full mode?" || return
	define_settings
	system_update
	install_gnome_extensions
	install_oh_my_zsh
	configure_zsh_and_alias
	set_zsh_as_default_shell
	install_vscode_root
	install_vscode_extensions
	configure_vscode_settings
	setup_tlp
	install_extras
	install_edge
	gsettings set org.gnome.shell favorite-apps "['org.gnome.Nautilus.desktop', 'microsoft-edge.desktop', 'org.gnome.Terminal.desktop', 'code.desktop']"
	gcl https://github.com/ChrisTitusTech/Top-5-Bootloader-Themes ; echo Theme: vimix ; sudo ./Top-5-Bootloader-Themes/install.sh
	sudo sed -i 's/^GRUB_CMDLINE_LINUX_DEFAULT=.*/GRUB_CMDLINE_LINUX_DEFAULT="quiet"/' /etc/default/grub
	sudo sed -i 's/^GRUB_TIMEOUT=.*/GRUB_TIMEOUT="2"/' /etc/default/grub
	sudo update-grub
	echo 'sudo reboot to finish the setup'
	quit
}
about() {
	while true; do
		REPLY=$(gum choose --header="What do you want to know about?" repo docker gum test.sh back)
		case $REPLY in
			repo)
				open https://github.com/andrexandre/script > /dev/null
				;;
			docker)
				open https://docs.docker.com/engine/install/ubuntu > /dev/null
				open https://docs.docker.com/engine/install/linux-postinstall > /dev/null
				;;
			gum)
				open https://github.com/charmbracelet/gum?tab=readme-ov-file#gum > /dev/null
				;;
			test.sh)
				open https://gist.github.com/andrexandre/d2b3bd31f14904c7ca7e4dc7fe617907 > /dev/null
				;;
		esac
		[ "$REPLY" = "back" ] && break
		sleep 1
	done
}
view_code() {
	curl -fsSL https://raw.githubusercontent.com/andrexandre/script/refs/heads/main/script | awk "/^${1}\(\) {/,/}/" | gum pager
}
toggle_view_code() {
	[ "$view_code_enabled" = "n" ] && secondary=$green || secondary=$blue
	[ "$view_code_enabled" = "n" ] && user_prompt='Choose a function to see the code:' || user_prompt='Choose a function to execute:'
	update_styling_variables
	[ "$view_code_enabled" = "n" ] && unset start_view_code && quit_view_code=toggle_view_code
	[ "$view_code_enabled" = "y" ] && unset quit_view_code && start_view_code=toggle_view_code
	[ "$view_code_enabled" = "n" ] && view_code_enabled=y || view_code_enabled=n
}
clone_repo() {
	if ! command -v jq &> /dev/null; then
		echo "jq is not installed. Please install jq to continue."
		return 1
	fi
	! command -v fzf &> /dev/null && install_cmd_rootless fzf
	if [ -z "$1" ]; then
		local username=$(gum input --placeholder "Name of the github user")
		[ -z "$username" ] && return
		[ $username = "a" ] && username=andrexandre
	fi
	if [ -z "$2" ]; then
		local repo=$(curl -fsSL https://api.github.com/users/$username/repos | jq -r '.[].name' | fzf)
		[ -z "$repo" ] && return
		git clone --recursive "git@github.com:$username/$repo.git" "$OLDPWD/$repo"
	fi
}
main() {
	! command -v gum &> /dev/null && echo gum not installed && return
	gum style --bold --border double --padding "0 1" --align center "Welcome to the Linux setup script!"
	while true; do
		REPLY=$(gum choose --header="$user_prompt" install configure system mode options $quit_view_code quit)
		case $REPLY in
			install)
				REPLY=$(gum choose --header="$user_prompt" install_cmd_rootless install_cmd_root \
					install_vscode_rootless install_vscode_root install_oh_my_zsh install_edge install_docker back)
				;;
			configure)
				REPLY=$(gum choose --header="$user_prompt" configure_vscode_extensions configure_vscode_settings \
					configure_zsh_and_alias set_zsh_as_default_shell uninstall_cmd_rootless back)
				;;
			system)
				REPLY=$(gum choose --header="$user_prompt" system_update install_gnome_extensions install_extras \
					define_settings setup_tlp back)
				;;
			mode)
				REPLY=$(gum choose --header="$user_prompt" rootless_mode root_mode full_mode back)
				;;
			options)
				REPLY=$(gum choose --header="$user_prompt" $start_view_code show_script_code \
					about clone_repo back)
				;;
		esac
		[ "$REPLY" = "toggle_view_code" ] && toggle_view_code && continue
		[ "$REPLY" = "back" ] && continue
		[ "$REPLY" = "quit" ] && quit
		if [ "$view_code_enabled" = "n" ]; then
			$REPLY
		else
			view_code "$REPLY"
		fi
	done
}
if ! command -v gum &> /dev/null; then
	echo "Downloading the latest version of gum..."
	download_url=$(curl -fsSL https://api.github.com/repos/charmbracelet/gum/releases/latest | grep -Eo '"https://github.com/charmbracelet/gum/releases/download/[^"]*_Linux_x86_64\.tar\.gz"')
	[ -z "$download_url" ] && echo "Failed to download gum" && quit 1
	url=$(echo "$download_url" | sed 's/^"//;s/"$//')
	wget -q --show-progress "$url"
	gum_latest_release=$(basename "$url" .tar.gz)
	tar -xzf $gum_latest_release.tar.gz
	mv $gum_latest_release/gum $HOME/.local/bin
	rm -rf $gum_latest_release.tar.gz $gum_latest_release
fi
# toggle debug mode by doing: export DEBUG=y/unset DEBUG
if [ "$DEBUG" ]; then
	wget -q gist.github.com/andrexandre/d2b3bd31f14904c7ca7e4dc7fe617907/raw/test.sh
	bash test.sh
	rm test.sh
	gum confirm "Continue?" || quit
fi
view_code_enabled=n
start_view_code=toggle_view_code
user_prompt='Choose a function to execute:'
if [ -z "$list" ]; then
	main
else
	echo list: $list
	[ "$arg" ] && list=$(echo "$list" | tr ' ' '\n')
	echo "$list" | while read -r list_item; do
		$list_item
	done
	quit
fi
